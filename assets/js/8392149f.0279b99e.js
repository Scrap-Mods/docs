"use strict";(self.webpackChunkscrap_docs=self.webpackChunkscrap_docs||[]).push([[7199],{6069:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>a,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var i=n(4848),s=n(8453);const r={title:"44 - Connect"},d="Connect",c={id:"networking/Packets/connect",title:"44 - Connect",description:"This packet is sent when the player changes a connection between two connection points with the connect tool.",source:"@site/docs/networking/Packets/44-connect.mdx",sourceDirName:"networking/Packets",slug:"/networking/Packets/connect",permalink:"/docs/networking/Packets/connect",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:44,frontMatter:{title:"44 - Connect"},sidebar:"networkingSidebar",previous:{title:"43 - Lift Delete Creation",permalink:"/docs/networking/Packets/lift-delete-creation"},next:{title:"45 - Lift Import Creation",permalink:"/docs/networking/Packets/lift-import-creation"}},o={},h=[{value:"Structure",id:"structure",level:2},{value:"Flags bitfield",id:"flags-bitfield",level:3},{value:"Interaction type",id:"interaction-type",level:4},{value:"Child connection type",id:"child-connection-type",level:4},{value:"Validation",id:"validation",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"connect",children:"Connect"}),"\n",(0,i.jsx)(t.p,{children:"This packet is sent when the player changes a connection between two connection points with the connect tool."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"ID"}),": 0x2C (44)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Size"}),": 9 bytes"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"LZ4 Compressed"}),": Yes"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"State"}),": Playing"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Bound To"}),": Client -> Server"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"structure",children:"Structure"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Offset"}),(0,i.jsx)(t.th,{children:"Field Name"}),(0,i.jsx)(t.th,{children:"Field Type"}),(0,i.jsx)(t.th,{children:"Notes"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"0x00"}),(0,i.jsx)(t.td,{children:"Child ID"}),(0,i.jsx)(t.td,{children:"be u32"}),(0,i.jsx)(t.td,{children:"The ID of the interactable or bearing the connection is made to."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"0x04"}),(0,i.jsx)(t.td,{children:"Parent ID"}),(0,i.jsx)(t.td,{children:"be u32"}),(0,i.jsx)(t.td,{children:"The ID of the interactable the connection is made from."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"0x08"}),(0,i.jsx)(t.td,{children:"Flags"}),(0,i.jsx)(t.td,{children:"u8 bitfield"}),(0,i.jsxs)(t.td,{children:["The bitfield denoting what type of interaction was made with the connection. See ",(0,i.jsx)(t.a,{href:"#flags-bitfield",children:"Flags bitfield"}),"."]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"flags-bitfield",children:"Flags bitfield"}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"These two tables document bitfields of the same byte."})}),"\n",(0,i.jsx)(t.h4,{id:"interaction-type",children:"Interaction type"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bits"}),(0,i.jsx)("th",{children:"Field name"}),(0,i.jsx)("th",{children:"Notes"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"7"}),(0,i.jsx)("td",{children:"Unused"}),(0,i.jsx)("td",{})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"6"}),(0,i.jsx)("td",{children:"Reverse Direction"}),(0,i.jsx)("td",{children:"Setting this field reverses the direction the bearing spins in, if it exists."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"5"}),(0,i.jsx)("td",{children:"Disconnect"}),(0,i.jsx)("td",{children:"Setting this field destroys the connection between the parent and the child, if it exists."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"4"}),(0,i.jsx)("td",{children:"Connect"}),(0,i.jsx)("td",{children:"Setting this field creates a connection between the parent and the child, if it does not exist."})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["Setting both the ",(0,i.jsx)(t.code,{children:"Connect"})," and the ",(0,i.jsx)(t.code,{children:"Disconnect"})," bits causes the connection to toggle."]}),"\n",(0,i.jsxs)(t.p,{children:["If the ",(0,i.jsx)(t.code,{children:"Reverse Direction"})," bit is set, the ",(0,i.jsx)(t.code,{children:"Connect"})," and ",(0,i.jsx)(t.code,{children:"Disconnect"})," bits are ignored. For parts this means the connection cannot be modified if the ",(0,i.jsx)(t.code,{children:"Reverse Direction"})," is set, while for bearings the direction is always reversed, regardless of the values of the ",(0,i.jsx)(t.code,{children:"Connect"})," and ",(0,i.jsx)(t.code,{children:"Disconnect"})," bits."]}),"\n",(0,i.jsx)(t.p,{children:"If no bits are set, nothing happens."}),"\n",(0,i.jsx)(t.h4,{id:"child-connection-type",children:"Child connection type"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bits"}),(0,i.jsx)("th",{children:"Field name"}),(0,i.jsx)("th",{children:"Notes"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"3"}),(0,i.jsx)("td",{rowspan:"2",children:"Unused"}),(0,i.jsx)("td",{rowspan:"2"})]}),(0,i.jsx)("tr",{children:(0,i.jsx)("td",{children:"2"})}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"1"}),(0,i.jsx)("td",{children:"Bearing"}),(0,i.jsx)("td",{children:"Set this bit to connect a part to a bearing."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"0"}),(0,i.jsx)("td",{children:"Standard"}),(0,i.jsx)("td",{children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)("p",{children:"Set this bit to connect two parts or a part to a piston."}),"\r\nIf this bit it set, the ",(0,i.jsx)("code",{children:"Bearing"})," bit is ignored."]})})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"If no bits are set, nothing happens."}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:["If the ",(0,i.jsx)(t.code,{children:"Bearing"})," bit is set, the ",(0,i.jsx)(t.code,{children:"Part"})," bit is not set, and the child of the connection is not a bearing, the game will crash!"]})}),"\n",(0,i.jsx)(t.h2,{id:"validation",children:"Validation"}),"\n",(0,i.jsx)(t.p,{children:"If either the parent or child do not exist, nothing happens."}),"\n",(0,i.jsxs)(t.p,{children:["If the parent is a scripted part and the child is a bearing, the server does not validate if connecting parent and child is allowed. The connection will be made or destroyed, regardless of the scripted part's ",(0,i.jsx)(t.code,{children:"connectionOutput"})," value."]}),"\n",(0,i.jsx)(t.p,{children:"If the child is a bearing, the server does not validate if the child does not already have a parent. This allows for connecting multiple parents to a single bearing. This can be achieved through blueprint editing as well and is persistent through reloads."})]})}function a(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>c});var i=n(6540);const s={},r=i.createContext(s);function d(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);