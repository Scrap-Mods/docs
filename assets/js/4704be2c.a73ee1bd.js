"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[4072],{3905:(t,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>g});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var l=n.createContext({}),c=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},u=function(t){var e=c(t.components);return n.createElement(l.Provider,{value:e},t.children)},p="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),p=c(r),d=a,g=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(g,i(i({ref:e},u),{},{components:r})):n.createElement(g,i({ref:e},u))}));function g(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[p]="string"==typeof t?t:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8654:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"String"},i="String",s={unversionedId:"networking/common-structures/string",id:"networking/common-structures/string",title:"String",description:'The String structure is a simple utf-8 encoded string type that is used to represent text, prefixed with a size in bytes. It is commonly used in the network protocol to represent text data. This pattern of a size prefixed string is sometimes referred to as a "Pascal String".',source:"@site/docs/networking/common-structures/string.mdx",sourceDirName:"networking/common-structures",slug:"/networking/common-structures/string",permalink:"/docs/networking/common-structures/string",draft:!1,editUrl:"https://pr.new/github.com/Scrap-Mods/docs/blob/main/docs/networking/common-structures/string.mdx",tags:[],version:"current",frontMatter:{title:"String"},sidebar:"networkingSidebar",previous:{title:"BlobData",permalink:"/docs/networking/common-structures/blobdata"},next:{title:"Packets",permalink:"/docs/category/packets"}},l={},c=[{value:"Structure",id:"structure",level:2}],u={toc:c},p="wrapper";function m(t){let{components:e,...r}=t;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"string"},"String"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"String"),' structure is a simple utf-8 encoded string type that is used to represent text, prefixed with a size in bytes. It is commonly used in the network protocol to represent text data. This pattern of a size prefixed string is sometimes referred to as a "Pascal String".'),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Offset"),(0,a.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Field Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0x00"),(0,a.kt)("td",{parentName:"tr",align:null},"Size"),(0,a.kt)("td",{parentName:"tr",align:null},"be u16"),(0,a.kt)("td",{parentName:"tr",align:null},"The size of the string in bytes.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0x02"),(0,a.kt)("td",{parentName:"tr",align:null},"Data"),(0,a.kt)("td",{parentName:"tr",align:null},"char","[Size]"),(0,a.kt)("td",{parentName:"tr",align:null},"The utf-8 encoded string data.")))))}m.isMDXComponent=!0}}]);